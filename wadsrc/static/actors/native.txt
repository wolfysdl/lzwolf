const int CHF_DONTDODGE = 1;
const int CHF_BACKOFF = 2;
const int CHF_NOSIGHTCHECK = 4;
const int CHF_NOPLAYACTIVE = 8;

const int CMF_AIMOFFSET = 1;
const int CMF_AIMDIRECTION = 2;
const int CMF_PROJHITENEMY = 4;

const int CPF_USEAMMO = 1;
const int CPF_ALWAYSPLAYSOUND = 2;

const int CVF_RELATIVE = 1;
const int CVF_REPLACE = 2;

const int WAF_NORANDOM = 1;

const int GAF_NORANDOM = 1;
const int GAF_NOAMMO = 2;
const int GAF_MACDAMAGE = 4;

const int SXF_TRANSFERPOINTERS = 1;

const int ASP_CHASE = 3;

const int XF_HURTSOURCE = 1;

const int WRF_NOBOB = 1;
const int WRF_NOPRIMARY = 2;
const int WRF_NOSECONDARY = 4;
const int WRF_NOFIRE = WRF_NOPRIMARY|WRF_NOSECONDARY;
const int WRF_NOSWITCH = 8;
const int WRF_DISABLESWITCH = 0x10;
const int WRF_ALLOWRELOAD = 0x20;
const int WRF_ALLOWZOOM = 0x40;

const int ZOOM_INSTANT = 1;
const int ZOOM_NOSCALETURNING = 2;

const int DF_REVIVE = 1;

const int DIR_EAST      = 0;
const int DIR_NORTHEAST = 1;
const int DIR_NORTH     = 2;
const int DIR_NORTHWEST = 3;
const int DIR_WEST      = 4;
const int DIR_SOUTHWEST = 5;
const int DIR_SOUTH     = 6;
const int DIR_SOUTHEAST = 7;
const int DIR_NODIR     = 8;

const int CHAN_AUTO = 1;
const int CHAN_WEAPON = 2;
const int CHAN_VOICE = 3;
const int CHAN_ITEM = 4;
const int CHAN_BODY = 5;

const float ATTN_NONE = 0.0; // full volume the entire level; left/right ear approximation is also disabled
const float ATTN_NORM = 1.0; // vanilla
const float ATTN_IDLE = 1.001; // vanilla with added distance attenuation
const float ATTN_STATIC = 3.0; // diminish very rapidly with distance

actor Actor native
{
	actionns "lz"
	damage 0
	radius 20
	height 16
	health 1000
	sighttime 1
	speed 0
	points 0
	minmissilechance 200
	missilefrequency 1.0
	meleerange 44
	scale 1.0
	projectilepassheight -1
	singlespawn 0
	loaded 0
	zoneindex 0

	native angle_t angle;
	native int health;
	native int loaded;
	native int zoneindex;

	action native A_ActiveSound(int chance=256);
	action native A_AlertMonsters();
	action native A_AmbientJumpState(state frame, bool enter);
	action native A_BossDeath();
	action native A_CallSpecial(int special, int arg1=0, int arg2=0, int arg3=0, int arg4=0, int arg5=0);
	action native A_ChangeFlag(string flag, bool value);
	action native A_ChangeVelocity(float x, float y, float z, int flags = 0);
	action native A_Chase(state melee="*", state ranged="*", int flags = 0);
	action native A_CustomMissile(string missiletype, float spawnheight = 32, int spawnoffset = 0, float angle = 0, int aimflags = 0);
	action native A_Dormant(state frame = "See", int flags = 0);
	action native A_EnableHaloLight(int id, bool enabled);
	action native A_EnableZoneLight(int id, bool enabled);
	action native A_Explode(int damage = 128, int radius = 128, int flags = XF_HURTSOURCE, bool alert = false, int fulldamageradius = 0);
	action native A_FaceTarget(float max_turn = 0, float max_pitch = 270);
	action native A_Fall();
	action native A_GiveExtraMan(int amount = 1);
	action native A_GiveInventory(string type, int amount = 0);
	action native A_InertMove(float move, int dir);
	action native A_Jump(int chance, state frame, ...);
	action native A_JumpIf(bool expression, state frame);
	action native A_JumpIfCloser(float distance, state frame);
	action native A_JumpIfInventory(string type, int amount, state frame);
	action native A_Look(int flags = 0, float minseedist = 0, float maxseedist = 0, float maxheardist = 0, float fov = 180, state frame = "*");
	action native A_LookEx(int flags = 0, float minseedist = 0, float maxseedist = 0, float maxheardist = 0, float fov = 180, state frame = "*"); // Alias
	action native A_MeleeAttack(int damage, float accuracy = 0.6275, string hitsound = "", string misssound = "*");
	action native A_MirrorPosition(float mirx);
	action native A_MonsterRefire(int chance, state abort);
	action native A_Pain();
	action native A_PlaySound(string soundname, int slot = CHAN_BODY, float volume = 1.0, bool looping = false, float attenuation = ATTN_NORM);
	action native A_RadiusWake(int radius = 128);
	action native A_ResetPosition(float x = 0, float y = 0);
	action native A_ScaleVelocity(float scale);
	action native A_Scream();
	action native A_SelectWeapon(int slot);
	action native A_SetPicXY(int picX, int picY);
	action native A_SetProperty(string propName, auto value);
	action native A_SetTics(float duration);
	action native A_SetVolume(float volume);
	action native A_SpawnItem(string type, float distance = 0, float zheight = 0);
	action native A_SpawnItemEx(string type, float xoffset = 0, float yoffset = 0, float zoffset = 0, float xvel = 0, float yvel = 0, float zvel = 0, float angle = 0, int flags = 0, int failchance = 0);
	action native A_Stop();
	action native A_StopSound(int slot = CHAN_VOICE);	// Bad default but that's what is originally was...
	action native A_TakeInventory(string type, int amount);
	action native A_UpdateZoneIndex();
	action native A_Wander();
	action native A_WolfAttack(int flags = 0, string sound = "*", float snipe = 1.0, int maxdamage = 64, int blocksize = 128, int pointblank = 2, int longrange = 4, float runspeed = 160.0);

	action native lz::A_Explode(int damage = 128, int radius = 128, int flags = XF_HURTSOURCE, bool alert = false, int fulldamageradius = 0, string damagetype = "");

	states
	{
		Spawn:
			TNT1 A -1
			stop
	}
}

actor Inventory native
{
	inventory.amount 1
	inventory.maxamount 1
	inventory.interhubamount 1
	inventory.pickupsound "misc/i_pkup"

	states
	{
		Hide:
			TNT1 A -1
			stop
	}
}

actor Ammo : Inventory native
{
	inventory.pickupsound "misc/ammo_pkup"
}

actor Armor : Inventory native
{
	inventory.pickupsound "misc/armor_pkup"
}

actor BasicArmor : Armor native
{
	//+inventory.KEEPDEPLETED
}

actor BasicArmorBonus : Armor native
{
	+inventory.AUTOACTIVATE
	+inventory.ALWAYSPICKUP
	inventory.maxamount 0
	armor.savepercent 0.333333

}

actor BasicArmorPickup : Armor native
{
	+inventory.AUTOACTIVATE
	inventory.maxamount 0
}

actor BackpackItem : Inventory native
{
}

actor CustomInventory : Inventory native
{
	action native A_Succeed();
	action native A_WeaponGrin();
}

actor Damage : Inventory native
{
	damage.ignorearmor 0
	damage.noxdeath 0
	damage.silent 0
	damage.melee 0
}

actor ExtraLifeItem : Inventory native
{
	inventory.amount 1
	inventory.maxamount 1
}

actor Faction : Inventory native
{
}

actor Health : Inventory native
{
	inventory.amount 1
	inventory.maxamount 0
	inventory.pickupsound "misc/health_pkup"
}

actor Key : Inventory native
{
	inventory.pickupsound "misc/k_pkup"
	inventory.interhubamount 0
}

actor KeyGiver : Inventory native
{
	inventory.pickupsound "misc/k_pkup"
}

actor MapRevealer : Inventory native
{
}

actor ScoreItem : Inventory native
{
	+COUNTITEM
	inventory.amount 1
}

actor Weapon : Inventory native
{
	inventory.pickupsound "misc/w_pkup"
	weapon.ammotype1 "None"
	weapon.ammogive1 0
	weapon.ammouse1 0
	weapon.bobrangex 1.0
	weapon.bobrangey 1.0
	weapon.bobspeed 1.0
	weapon.bobstyle "Normal"
	weapon.yadjust 0

	action native A_BeginHeightAnim(float newheight, int period);
	action native A_CustomPunch(int damage, bool norandom=false, int flags=0, string pufftype="", float range=0, float lifesteal=0);
	action native A_FireCustomMissile(string missiletype, float angle=0, bool useammo=true, int spawnoffset=0, int spawnheight=0, bool aim=false, float pitch=0);
	action native A_GunAttack(int flags = 0, string sound = "*", float snipe = 1.0, int maxdamage = 64, int blocksize = 128, int pointblank = 2, int longrange = 4, int maxrange = 21);
	action native A_GunFlash(state frame="*");
	action native A_Light(int level);
	action native A_Light0();
	action native A_Light1();
	action native A_Light2();
	action native A_Lower();
	action native A_Raise();
	action native A_ReFire(state hold="*");
	action native A_WeaponReady(int flags=0);
	action native A_ZoomFactor(float zoom, int flags=0);
}

actor WeaponGiver : Weapon native
{
	weapon.ammogive1 -1
	weapon.ammogive2 -1
}

actor PlayerPawn native
{
	painchance 255
	sighttime 0
	speed 1
	player.viewheight 41
	player.forwardmove 1, 1
	player.sidemove 1, 1
	player.maxhealth 100
	player.movebob 1.0
	player.damagescreencolor "FF 00 00"
	+SOLID
	+SHOOTABLE
	+PICKUP
	states
	{
		// ZDoom doesn't do this, but since invisible player classes are likely here, we need this state.
		Death:
			TNT1 A -1 A_Fall
			stop
	}
}

// SwitchableDecoration: Activate and Deactivate change state --------------

actor SwitchableDecoration native
{
}


actor SwitchingDecoration : SwitchableDecoration native
{
}

// Ambient: Ambient sounds -------------------------------------------------

actor Ambient native
{
	states
	{
		Spawn:
			TNT1 A 30
		Check:
			TNT1 A 70 A_AmbientJumpState("Start", true)
			loop

		Start:
			TNT1 A 70 A_PlaySound("guard/sight", CHAN_AUTO, 0.2, true, ATTN_NONE)
			goto StartLevel1
		End:
			TNT1 A 70 A_SetVolume(0.8)
			goto EndLevel1
			
		StartLevel1:
			TNT1 A 70 A_SetVolume(0.4)
			goto StartLevel2
		StartLevel2:
			TNT1 A 70 A_SetVolume(0.6)
			goto StartLevel3
		StartLevel3:
			TNT1 A 70 A_SetVolume(0.8)
			goto StartLevel4
		StartLevel4:
			TNT1 A 70 A_SetVolume(1.0)
			goto WaitEnd
		WaitEnd:
			TNT1 A 70 A_AmbientJumpState("End", false)
			loop

		EndLevel1:
			TNT1 A 70 A_SetVolume(0.6)
			goto EndLevel2
		EndLevel2:
			TNT1 A 70 A_SetVolume(0.4)
			goto EndLevel3
		EndLevel3:
			TNT1 A 70 A_SetVolume(0.2)
			goto EndLevel4
		EndLevel4:
			TNT1 A 70 A_StopSound
			goto Check
	}
}

// Random spawner ----------------------------------------------------------

actor RandomSpawner native
{
}

actor Unknown
{
	radius 32
	states
	{
		Spawn:
			UNKN A -1
			stop
	}
}
